<?php

session_start();
foreach ($argv as $arg) {
    $e=explode("=",$arg);
    if(count($e)==2)
        $_GET[$e[0]]=$e[1];
    else   
        $_GET[$e[0]]=0;
}

class DustAuth extends SQLite3
{
    const dustauth_create_sql = <<<EOF
DROP TABLE IF EXISTS users;

CREATE TABLE users (
id INTEGER PRIMARY KEY AUTOINCREMENT,
username TEXT NOT NULL,
hash TEXT,
role TEXT,
fullname TEXT NOT NULL,
organization TEXT,
email TEXT,
lockedout INTEGER NOT NULL DEFAULT 0,
authfailures INTEGER NOT NULL DEFAULT 0
);

INSERT INTO users (username, hash, role, fullname, organization, email)
VALUES ('jbmetzgar', '', 'admin', 'Jonathan Metzgar', 'UAF', 'jbmetzgar@alaska.edu');
EOF;

    function __construct() {
        parent::__construct('dustauth.sqlite');
        if (!$this->exists()) {
            print "db does not exist or does not contain 'users'";
            $this->createDB();
        }
        $this->openDB();
        $this->isloggedin = false;
        $this->isadmin = false;
        $this->username = '';
        $this->userid = '';
        $this->userrole = '';
        $this->userfullname = '';
        $this->userorganization = '';
        $this->useremail = '';
    }

    function exists() {
        if (!file_exists("dustauth.sqlite")) {
            print "no database";
            return false;
        }
        if (!$this->query('SELECT * FROM users')) {
            print "no users";
            return false;
        }
        return true;
    }

    function createDB() {
        $results = array(
            'operation' => 'create',
            'results' => 'success',
            'result' => true
        );
        $sql = self::dustauth_create_sql;
        $ret = $this->exec(self::dustauth_create_sql);
        if (!$ret) {
            $results['results'] = "SQL: '${sql}' | LastErrorMsg(): " . $this->lastErrorMsg();
            $results['result'] = false;
        } else {
            $hash = password_hash('uafdust', PASSWORD_DEFAULT);
            $this->updatefield('jbmetzgar', 'hash', $hash);
            // update the default user with a default password
            /*
            $sql = "UPDATE users SET hash = :hash WHERE username = :username;";
            $stmt = $this->prepare($sql);
            $stmt->bindValue(':hash', password_hash('uafdust', PASSWORD_DEFAULT));
            $stmt->bindValue(':username', 'jbmetzgar');
            $stmt->execute();
             */
        }
        $this->close();

        return $results;
    }

    function openDB() {
        if (!$this->exists()) {
            $this->createDB();
        }
    }

    function resetState() {
        $this->isloggedin = false;
        $this->isadmin = false;
        $this->username = '';
        $this->userid = '';
        $this->userrole = '';
        $this->userfullname = '';
        $this->userorganization = '';
        $this->useremail = '';
    }

    function begin() {
        session_start();
    }

    function session($id) {
        return isset($_SESSION[$id]) ? $_SESSION[$id] : '';
    }

    function post($id) {
        return isset($_POST[$id]) ? $_POST[$id] : '';
    }

    function printsession() {
        print "<br>" . $this->session('userid');
        print "<br>" . $this->session('username');
        print "<br>" . $this->session('userrole');
        print "<br>" . $this->session('userfullname');
        print "<br>" . $this->session('userorganization');
        print "<br>" . $this->session('useremail');
    }

    function setsession() {
        $_SESSION['userid'] = $this->userid;
        $_SESSION['username'] = $this->username;
        $_SESSION['userrole'] = $this->userrole;
        $_SESSION['userfullname'] = $this->userfullname;
        $_SESSION['userorganization'] = $this->userorganization;
        $_SESSION['useremail'] = $this->useremail;
    }

    function getsession() {
        if (isset($_SESSION['userid'])) {
            $this->userid = $_SESSION['userid'];
            $this->username = $_SESSION['username'];
            $this->userrole = $_SESSION['userrole'];
            $this->userfullname = $_SESSION['userfullname'];
            $this->userorganization = $_SESSION['userorganization'];
            $this->useremail = $_SESSION['useremail'];
            $this->setflags();            
        } else {
            $this->resetState();
            return;
        }
    }

    function setflags() {
        $this->isloggedin = false;
        $this->isadmin = false;
        if (!empty($this->username)) {
            $this->isloggedin = true;
        }
        if ($this->userrole == 'admin') {
            $this->isadmin = true;
        }
    }

    function updatefield($username, $fieldname, $fieldvalue) {
        $sql = "UPDATE users SET $fieldname = :fieldvalue WHERE username = :username;";
        $stmt = $this->prepare($sql);
        $stmt->bindValue(':username', $username);
        $stmt->bindValue(':fieldvalue', $fieldvalue);
        $result = $stmt->execute();
        if (!$result) {
            print "<br>error updating $fieldname with value $fieldvalue for $username";
            print "<br>$sql";
        }
    }

    function authfailure($username, $failures) {
        $maxFailures = 5;
        $failures += 1;
        print "<br>authfailures: $failures";
        $this->updatefield($username, "authfailures", $failures + 1);
    }

    function login() {
        // User login and password is a POST variable
        //
        $username = isset($_POST['username']) ? $_POST['username'] : '';
        $password = isset($_POST['password']) ? $_POST['password'] : '';
        $hash = password_hash($password, PASSWORD_DEFAULT);
        $sql = "SELECT * FROM users "
            . "WHERE username = :username;";// AND hash = :hash LIMIT 1;";
        $stmt = $this->prepare($sql);
        if (!$stmt) {
            print "could not prepare statement";
            print "'" . $sql . "'";
            return;
        }
        $stmt->bindValue(':username', $username, SQLITE3_TEXT);
        $result = $stmt->execute();
        if ($result->numColumns()) {
            while ($row = $result->fetchArray()) {
                $hash = $row['hash'];
                if (!password_verify($password, $hash)) {
                    $this->authfailure($username, $row['authfailures']);
                    return false;
                }
                $this->userid = $row['id'];
                $this->username = $row['username'];
                $this->userrole = $row['role'];
                $this->userfullname = $row['fullname'];
                $this->userorganization = $row['organization'];
                $this->useremail = $row['email'];
                $this->setsession();
                $this->setflags();
                return true;
            }
        } else {
            return false;
        }
    }

    function logout() {
        session_unset();
        session_destroy();
        $this->resetState();
        session_start();
    }

    function authenticate() {
        $logout = false;
        $login = false;
        if (isset($_GET['logout'])) {
            $logout = true;
        }

        if (isset($_GET['login'])) {
            $login = true;
        }

        if ($login && $logout) {
            die("login and logout cannot both be specified");
        }

        if ($logout) {
            $this->logout();
            unset($_GET['logout']);
            $this->authenticate();
            return;
            // print "<meta http-equiv='refresh' content='0;URL=dustauth.php' />";
            // exit(0);
        }

        $this->getsession();

        if ($login && !$this->isloggedin) {
            if (isset($_POST['username']) && isset($_POST['password'])) {
                $this->login();
            }
        }
    }

    function admin_getusers() {
        if (!$this->isadmin) return array();
        $sql = "SELECT id, username, role, fullname, organization, email, lockedout, authfailures "
            . "FROM users";
        $result = $this->query($sql);
        $users = array();
        while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
            $user = array();
            $user['userid'] = $row['id'];
            $user['username'] = $row['username'];
            $user['role'] = $row['role'];
            $user['fullname'] = $row['fullname'];
            $user['organization'] = $row['organization'];
            $user['email'] = $row['email'];
            $user['lockedout'] = $row['lockedout'];
            $user['authfailures'] = $row['authfailures'];
            array_push($users, $user);
        }
        return $users;
    }

    function admin_islockedout($username) {
        if (!$this->isadmin) return false;
        $sql = "SELECT lockedout FROM users WHERE lockedout <> 0 AND username = :username;";
        $stmt = $this->prepare($sql);
        $stmt->bindValue(':username', $username);
        $result = $stmt->execute();
        $count = 0;
        while ($row = $result->fetchArray()) $count++;
        return $count;
    }

    function admin_adduser() {
        if (!$this->isadmin) return;
        if (!isset($_GET['adduser'])) return;
        $username = $this->post('username');
        $password = $this->post('password');
        $fullname = $this->post('fullname');
        $organization = $this->post('organization');
        $email = $this->post('email');
        $lockedout = 0;
        $authfailures = 0;
        $hash = password_hash($password, PASSWORD_DEFAULT);
        $sql = "INSERT INTO users (username, hash, role, fullname, organization, email, lockedout, authfailures) "
            . "VALUES (:username, :hash, :role, :fullname, :organization, :email, :lockedout, :authfailures);";
        $stmt = $this->prepare($sql);
        $stmt->bindValue(':username', $username);
        $stmt->bindValue(':hash', $hash);
        $stmt->bindValue(':fullname', $fullname);
        $stmt->bindValue(':organization', $organization);
        $stmt->bindValue(':email', $email);
        $stmt->bindValue(':lockedout', $lockedout);
        $stmt->bindValue(':authfailures', $authfailures);
        $result = $stmt->execute();
    }
}

$dustauth = new DustAuth();
$dustauth->authenticate();

print"<html><head><title>dustauth</title></head><body>";
if ($dustauth->isloggedin) {
    print "<br>logged in!";
}

if ($dustauth->isloggedin) {
    print "<br><a href='dustauth.php?logout'>log out</a>";
}

if (!$dustauth->isloggedin) {
    print "<form action='dustauth.php?login' method='post'>";
    print "username: <input type='text' name='username'>";
    print "password: <input type='text' name='password'>";
    print "<input type='submit' value='login'>";
    print "</form>";
}

if ($dustauth->isadmin) {
    print "<h2>Users</h2>";
    $rows = $dustauth->admin_getusers();
    print "<table>";
    print "<tr><th>id</th><th>username</th><th>fullname</th><th>organization</th><th>email</th><th>locked</th><th>auth failures</th></tr>\n";
    foreach ($rows as $row) {
        print "<tr>";
        print "<td>{$row['userid']}</td>";
        print "<td>{$row['username']}</td>";
        print "<td>{$row['fullname']}</td>";
        print "<td>{$row['organization']}</td>";
        print "<td>{$row['email']}</td>";
        print "<td>{$row['lockedout']}</td>";
        print "<td>{$row['authfailures']}</td>";
        print "</tr>\n";
    }
    print "</table>";

    // add user
?>
<h2>Add User</h2>
<form method="post" action="dustauth.php?adduser">
<label>Username</label><input name="username" type="text" /><br />
<label>Password</label><input name="password" type="password" /><br />
<label>Full Name</label><input name="fullname" type="text" /><br />
<label>Organization</label><input name="organization" type="text" /><br />
<label>Email</label><input name="email" type="text" /><br />
<input type="submit" value="add user" />
</form>
<?php

    $dustauth->admin_adduser();
}

print "<br>loggedin = " . ($dustauth->isloggedin?"true":"false");

$dustauth->printsession();
print "<br><a href='dustauth.php'>go again</a>";

print "</body></html>";

?>

